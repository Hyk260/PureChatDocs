import{_ as r,c as s,J as l,w as o,a5 as n,m as e,a as t,E as c,o as p}from"./chunks/framework.Bx0JrJuv.js";const N=JSON.parse('{"title":"模型指南","description":"","frontmatter":{},"headers":[],"relativePath":"guides/model.md","filePath":"guides/model.md","lastUpdated":1716770819000}'),i={name:"guides/model.md"},d=n("",8),_=e("br",null,null,-1),u=e("h3",{id:"top-p",tabindex:"-1"},[e("code",null,"top_p"),t(),e("a",{class:"header-anchor",href:"#top-p","aria-label":'Permalink to "`top_p`"'},"​")],-1),h=e("p",null,"核采样 top_p 也是采样参数，跟 temperature 不一样的采样方式。模型在输出之前，会生成一堆 token，这些 token 根据质量高低排名，核采样模式中候选词列表是动态的，从 tokens 里按百分比选择候选词。 top_p 为选择 token 引入了随机性，让其他高分的 token 有被选择的机会，不会总是选最高分的。",-1),m=e("br",null,null,-1),P=e("h3",{id:"presence-penalty",tabindex:"-1"},[e("code",null,"presence_penalty"),t(),e("a",{class:"header-anchor",href:"#presence-penalty","aria-label":'Permalink to "`presence_penalty`"'},"​")],-1),g=e("p",null,"Presence Penalty 参数可以看作是对生成文本中重复内容的一种惩罚。当该参数设置较高时，生成模型会尽量避免产生重复的词语、短语或句子。相反，如果 Presence Penalty 参数较低，则生成的文本可能会包含更多重复的内容。通过调整 Presence Penalty 参数的值，可以实现对生成文本的原创性和多样性的控制。参数的重要性主要体现在以下几个方面：",-1),f=e("ul",null,[e("li",null,"提高生成文本的独创性和多样性：在某些应用场景下，如创意写作、生成新闻标题等，需要生成的文本具有较高的独创性和多样性。通过增加 Presence Penalty 参数的值，可以有效减少生成文本中的重复内容，从而提高文本的独创性和多样性。"),e("li",null,"防止生成循环和无意义的内容：在某些情况下，生成模型可能会产生循环、重复的文本，这些文本通常无法传达有效的信息。通过适当增加 Presence Penalty 参数的值，可以降低生成这类无意义内容的概率，提高生成文本的可读性和实用性。")],-1),k=n("",4);function b(y,T,q,x,C,S){const a=c("Callout");return p(),s("div",null,[d,l(a,null,{default:o(()=>[t(" 一般来说，prompt 越长，描述得越清楚，模型生成的输出质量就越好，置信度越高，这时可以适当调高 temperature 的值；反过来，如果 prompt 很短，很含糊，这时再设置一个比较高的 temperature 值，模型的输出就很不稳定了。 ")]),_:1}),_,u,h,l(a,null,{default:o(()=>[t(" top_p 与随机性类似，一般来说不建议和随机性 temperature 一起更改 ")]),_:1}),m,P,g,f,l(a,null,{default:o(()=>[t(" 值得注意的是，Presence Penalty 参数与其他参数（如 Temperature 和 top-p）共同影响着生成文本的质量。对比其他参数，Presence Penalty 参数主要关注文本的独创性和重复性，而 Temperature 和 top-p 参数则更多地影响着生成文本的随机性和确定性。通过合理地调整这些参数，可以实现对生成文本质量的综合控制 ")]),_:1}),k])}const A=r(i,[["render",b]]);export{N as __pageData,A as default};
